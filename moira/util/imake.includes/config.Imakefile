/**/#	$Source: /afs/.athena.mit.edu/astaff/project/moiradev/repository/moira/util/imake.includes/config.Imakefile,v $
/**/#

/* 
 * Configuration options.
 */

/* GLOBAL_CDEFS are passed to every C compile statement */

#ifdef _AIX
OSDEFS= -D_BSD -D_BSD_INCLUDES -DPOSIX
OSLIBS= -lbsd
#endif

#if defined(linux) || defined(__NetBSD__)
OSDEFS= -DPOSIX
#endif

#ifdef sgi
OSDEFS= -DPOSIX -DNEED_GETUSERSHELL
#endif

#if defined(SOLARIS)
OSDEFS= -DPOSIX -DSOLARIS
OSLIBS= -lresolv -lsocket -lnsl
#endif

#ifdef NeXT
OSLIBS= -lresolv
#endif

#ifdef __alpha
OSDEFS= -DSIXTYFOUR -DPOSIX
#endif

GLOBAL_CDEFS= -DHESIOD -DZEPHYR -DATHENA -DDBMS=ORACLE -I/usr/athena/include $(OSDEFS)


/* SRCTOP is the root of the Moira source tree */
SRCTOP=/mit/moiradev/src

/* DESTDIR is the root of the tree to install into.  
 * If null, install into the running system.
 *
 * DESTDIR='/' is guaranteed to cause trouble for systems which don't
 * like double slashes in pathnames.
 *
 * All the installed programs and files are put into ${DESTDIR}/wherever, e.g.
 * kinit would get installed into ${DESTDIR}${PROGDIR}/kuser
 */

DESTDIR= 

/*
 * These directories should be subdirectories of DESTDIR;
 * they show up as absolute pathnames here.
 */
/*
 * Note: USRDIR should be the parent of most of these directories.
 * If it is not, you may get errors when installing (the installation
 * process attempts to create USRDIR, in order to assure that all the
 * parents of these directories exist.
 */
USRDIR= /usr
ETCDIR= /usr/athena/etc
PROGDIR=/usr/athena/bin
LIBDIR= /usr/athena/lib
LINTLIBDIR = /usr/lib/lint
INCLDIR= /usr/athena/include
MANDIR= /usr/athena/man


/*
 * Define SVRBUILD if this machine has your DBMS installed on it so
 * that the server programs can be built which link against the DBMS
 * libraries.
 */
/* #define SVRBUILD */

/* Define USELOCALTOOLS if you already have built and installed in
 * your environment the following tools:
	imake
	makedepend
 */
#define USELOCALTOOLS

/* Define USELOCALLIBS if you already have built and installed in
 * your environment the following libraries and associated tools:
	com_err
 */
/* we want the newer versions from our source tree */
/* #define USELOCALLIBS */

/*
 * Define HESIOD if you have hesiod installed on your system and want
 * to use it for the Moira clients to find the Moira server.
 */
#define HESIOD

/*
 * Define ZEPHYR if you have zephyr installed on your system and want
 * to use it to report Moira server errors.  Also define the library
 * to link against.
 */
#define ZEPHYR
LZEPHYR=-lzephyr

/*
 * Define GDSS if you use the Generic Data Signature Service to 
 * stamp user records to guarentee their authenticity.  Also define
 * location of library and includes.
 */
#define GDSS
#define DO_GDSS
LIBGDSS= $(BUILDTOP)/util/gdss/lib/libgdss.a
GDSSINC= -DGDSS -I$(BUILDTOP)/util/gdss/include

/*
 * Define your DBMS here.  Currently only ORACLE is supported.
 */
#define ORACLE

/*
 * Define NEED_STRCASECMP if you don't have strcasecmp() in your libc.
 * (likely for older 4.3 systems and pre-4.3 systems)
 */
/* #define NEED_STRCASECMP */

MR_LIB=$(BUILDTOP)/lib/libmoira.a
MR_LIBDEP=$(MR_LIB)
GDB_LIB=$(BUILDTOP)/gdb/libmrgdb.a
GDB_LIBDEP=$(GDB_LIB)


/*
 * The name of a command which compiles error tables.
 */
#ifdef USELOCALLIBS
COMPILE_ET= compile_et
#else
COMPILE_ET= $(BUILDTOP)/util/et/compile_et
#endif
/*
 * Loader argument to get the com_err library
 */
#ifdef USELOCALLIBS
COM_ERR = -lcom_err
#else
COM_ERR = $(BUILDTOP)/util/et/libcom_err.a
#endif
/*
 * Dependency name for COM_ERR, if any
 */
#ifndef USELOCALLIBS
COM_ERR_DEP = $(COM_ERR)
COM_ERR_INC = -I$(BUILDTOP)/util/et/
#endif

LLIB = -L/usr/athena/lib

/* libraries most Moira programs use */
#ifdef HESIOD
CLIBS= $(MR_LIB) $(GDB_LIB) $(LLIB) $(LZEPHYR) $(COM_ERR) -lkrb -ldes -lhesiod
#else
CLIBS= $(MR_LIB) $(GDB_LIB) $(LLIB) $(LZEPHYR) $(COM_ERR) -lkrb -ldes
#endif

/* libraries SQL programs need */
#ifdef ORACLE
SQL_LIB= -L/usr/oracle/lib -lsql /usr/oracle/lib/osntab.o -lsqlnet -lora -lsqlnet -lora -lnlsrtl -lcv6 -lcore -lnlsrtl -lcv6 -lcore -lsocket -lnsl -lm -lm -ldl -laio
#endif

/* optional readline support for mrtest */
READLINE_INCLUDES= -I/mit/gnu/include/readline -DUSE_READLINE
READLINE_LIBS= -L/mit/gnu/lib -lreadline -ltermcap

/* Define NEED_STRCASECMP if your C library doesn't have the BSD-style
 * case insensitive string compare strcasecmp().
 */
#ifdef _AIX
#define NEED_STRCASECMP
#endif

/* HAS_VSPRINTF should be defined if this function is in your C library */
#if !defined(ultrix) && (!defined(sun) || defined(SOLARIS))
#define HAS_VSPRINTF
#endif

/* Curses library */
#ifdef SOLARIS
CURSES= -L/usr/css/lib -lcurses -ltermcap
#elif linux
CURSES= -lncurses -ltermcap
OSINCLUDES= -I/usr/include/ncurses
#elif _AIX
CURSES= -lcurses
#else
CURSES= -lcurses -ltermcap
#endif

/* X and motif (for mmoira client) */
#ifdef SOLARIS
XDIR= /usr/openwin
#else
XDIR= /usr/X11
#endif

#if !(defined(linux) || defined(__NetBSD__))
MOTIFINC= /mit/motif/include
MOTIFLIB= /mit/motif/`machtype`lib
#endif

/* where crypt is, if not libc and unistd.h */
#ifdef __NetBSD__
CRYPT= -lcrypt
#endif
#if defined(sgi) || defined(SOLARIS)
#define USE_CRYPT_H
#endif


/*
 * The name of a command which builds an object library.
 */
ARCHIVE= ar cru

/*
 * The name of another program needed to post-process the archive.
 */
#if defined(SOLARIS) || defined(sgi)
RANLIB= /bin/true
#else
RANLIB= ranlib
#endif


/* 
 * Install commands:  installs a file into the destination tree.
 * These commands are called with two arguments: the source and the
 * destination of the install.
 */
/* install a file */
INSTALLFILE= install -c -m 444
/* install a library */ 
INSTALLLIB= install -c -m 444
/* install a program */
INSTALLPROG= install -c -m 555 
/* invoke raw install program */
INSTALLRAW= install

LD=ld			/* The name of the target's linker */

#ifdef SOLARIS
CC=gcc
#else
#ifdef _AIX
#ifdef i386
CC=cc -q -D_BSD -DBSD_INCLUDES
#else /* i386 */
CC=cc -D_BSD -D_BSD_INCLUDES	/* Use BSD style header files & be quiet */
#endif /* i386 */
#else /* _AIX */
CC=cc			/* The name of the C compiler for the target */
#endif /* _AIX */
#endif /* SOLARIS */

CPP=$(CC) -E		/* A command which invokes the C preprocessor */

#ifndef _AIX		/* RS6K optomizer is buggy, we don't know if it wall affect moira */
DBG=-g			/* Debug or optimize? */
#endif /* _AIX */

SHELL=/bin/sh		/* shell to use from make */
MAKE=make		/* name of make program */
RM=rm -f		/* delete one or more files/directories/links */
MV=mv			/* rename/move a file */
CP=cp			/* copy a file */
LN=ln -s		/* create a link */
LPR=lpr -p		/* print a file or files */
CHMOD=chmod		/* change mode of a file */
AWK=awk			/* used to filter embeded SQL files */
