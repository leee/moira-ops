/* $Header: /afs/.athena.mit.edu/astaff/project/moiradev/repository/moira/regtape/students.dc,v 1.11 1990-06-13 12:46:57 mar Exp $
 */

#include <stdio.h>
#include <strings.h>
#include <ctype.h>
#include <sys/time.h>
#include <moira.h>
#include <moira_site.h>


##define WHO 11859		/* root */
##define PROG "stu-tape"

#define MAX_ID_VALUE	32766
#define MIN_ID_VALUE	101

/* File format is:

0-29	name
30-38	id number
50-54	school code
55-79   year
80-109  address
110-124 room
125-144 city
145-158 state
159-168 dorm phone
169-212 home address
213-232 home city
243-251 mit phone (?)
*/

#define LOC_NAME 0
#define LOC_ID 30
#define LOC_COURSE 50
#define LOC_YEAR 55
#define LOC_ADDRESS 80
#define LOC_DORM_ROOM 110
#define LOC_CITY 125
#define LOC_STATE 145
#define LOC_DPHONE 159
#define LOC_MPHONE 243

#define LEN_NAME 30
#define LEN_ID 9
#define LEN_COURSE 5
#define LEN_YEAR 25
#define LEN_ADDRESS 30
#define LEN_DORM_ROOM 15
#define LEN_CITY 20
#define LEN_STATE 14
#define LEN_DPHONE 9
#define LEN_MPHONE 9

struct entry {
    char *name;
    char *last;
    char *first;
    char *middle;
    char *title;
    char *id;
    char *eid;
    char *course;
    char *year;
    char *address;
    char *dorm;
    char *city;
    char *state;
    char *dphone;
    char *mphone;
    char *class;
};


char *whoami;
int newfinger = 0;
int addxuser = 0;


main(argc, argv)
int argc;
char **argv;
##{
    FILE *in;
    struct entry *e, *get_next_entry();
    int i, wait = 0;
    char buf[BUFSIZ], *file = NULL;

    whoami = rindex(argv[0], '/');
    if (whoami)
      whoami++;
    else
      whoami = argv[0];

    for (i = 1; i < argc; i++) {
	if (!strcmp(argv[i], "-w"))
	  wait++;
	else if (!strcmp(argv[i], "-D"))
	  setenv("ING_SET", "set printqry");
	else if (!strcmp(argv[i], "-n"))
	  newfinger++;
	else if (!strcmp(argv[i], "-u"))
	  addxuser++;
	else if (file != NULL)
	  fprintf(stderr, "Usage: %s [-w] [-D] [-n] [-u] inputfile\n", whoami);
	else
	  file = argv[i];
    }

    in = fopen(file, "r");
    if (in == NULL) {
	fprintf(stderr, "Unable to open %s for input\n", file);
	exit(1);
    }

##  ingres sms
##  range of u is users

    while (e = get_next_entry(in)) {
	process_entry(e);
	if (wait) {
	    printf("Next");
	    fflush(stdout);
	    gets(buf);
	}
    }

##  exit
    exit(0);
##}


struct entry *get_next_entry(in)
FILE *in;
{
    static struct entry e;
    static char buf[BUFSIZ], eid[16], classbuf[10], titlebuf[12];
    static char name[LEN_NAME+1], id[LEN_ID+1], course[LEN_COURSE+1];
    static char year[LEN_YEAR+1], address[LEN_ADDRESS+1];
    static char dorm_room[LEN_DORM_ROOM+1], city[LEN_CITY+1];
    static char state[LEN_STATE+1], dphone[LEN_DPHONE+1], mphone[LEN_MPHONE+1];
    static char sname[LEN_NAME+1], title[128];
    static int nyear = 0;
    int ends_jr, ends_iii, ends_iv, ends_sr;
    char *p;

    if (nyear == 0) {
	struct tm *tm;
	struct timeval tv;

	gettimeofday(&tv, NULL);
	tm = localtime(&tv.tv_sec);
	nyear = tm->tm_year;
	if (tm->tm_mon > 5)
	  nyear++;
    }

    if (fgets(buf, sizeof(buf), in) == NULL)
      return((struct entry *)NULL);

    strncpy(name, &buf[LOC_NAME], LEN_NAME); name[LEN_NAME] = 0;
    strncpy(id, &buf[LOC_ID], LEN_ID); id[LEN_ID] = 0;
    strncpy(course, &buf[LOC_COURSE], LEN_COURSE); course[LEN_COURSE] = 0;
    strncpy(year, &buf[LOC_YEAR], LEN_YEAR); year[LEN_YEAR] = 0;
    strncpy(address, &buf[LOC_ADDRESS], LEN_ADDRESS); address[LEN_ADDRESS] = 0;
    strncpy(dorm_room, &buf[LOC_DORM_ROOM], LEN_DORM_ROOM); dorm_room[LEN_DORM_ROOM] = 0;
    strncpy(city, &buf[LOC_CITY], LEN_CITY); city[LEN_CITY] = 0;
    strncpy(state, &buf[LOC_STATE], LEN_STATE); state[LEN_STATE] = 0;
    strncpy(dphone, &buf[LOC_DPHONE], LEN_DPHONE); dphone[LEN_DPHONE] = 0;
    strncpy(mphone, &buf[LOC_MPHONE], LEN_MPHONE); mphone[LEN_MPHONE] = 0;

    strcpy(sname, name);
    e.name = strtrim(sname);
    p = index(name, ',');
    if (p)
      *p = 0;
    e.last = strtrim(name);
    if (p) {
	p++;
	while (isspace(*p))
	  p++;
	e.first = p;	
	if (p = index(e.first, ' ')) {
	    *p = 0;
	    e.first = strtrim(e.first);
	    e.middle = strtrim(p + 1);
	} else {
	    e.first = strtrim(e.first);
	    e.middle = "";
	}
    } else {
	e.first = "";
	e.middle = "";
    }
    ends_jr = ends_iii = ends_iv = ends_sr = 0;
    LookForSt(e.last);
    LookForO(e.last);
    LookForJrAndIII(e.last, &ends_sr, &ends_jr, &ends_iii, &ends_iv);
    LookForJrAndIII(e.first, &ends_sr, &ends_jr, &ends_iii, &ends_iv);
    FixCase(e.last);
    FixCase(e.first);
    FixCase(e.middle);

    e.id = id;
    e.id[LEN_ID] = 0;
    e.eid = eid;
    EncryptID(e.eid, e.id, e.first, e.last);

    e.year = strtrim(year);
    e.title = title;
    if (e.year[0] == 'G') {
	e.class = "G";
	sprintf(title, "Grad Student");
    } else {
	e.class = classbuf;
	sprintf(classbuf, "%d", nyear + 4 - atoi(e.year) + 1900);
	sprintf(title, "Undergrad (class of %s)", classbuf);
    }

    e.course = strtrim(course);
    e.address = strtrim(address);
    e.dorm = strtrim(dorm_room);
    e.city = strtrim(city);
    e.state = strtrim(state);
    e.dphone = strtrim(dphone);
    e.mphone = strtrim(mphone);
    return(&e);
}


process_entry(e)
struct entry *e;
##{
    int changed, nochange;
    char buf[BUFSIZ], *from, *to;
##  char *first, *last, *eid, *title, *sid, *name;
##  char class[9], haddr[128], hphone[17], ophone[13], dept[24];
##  int id, status;

    first = e->first;
    if (strlen(first) > 16)
      first[16] = 0;
    last = e->last;
    if (strlen(last) > 16)
      last[16] = 0;
    eid = e->eid;
    id = 0;
##  repeat retrieve (id = u.users_id, class = u.mit_year, haddr = u.home_addr,
##	      hphone = u.home_phone, ophone = u.office_phone,
##	      status = u.#status, dept = u.mit_dept)
##	where u.#last = @last and u.#first = @first and u.mit_id = @eid
    if (id == 0) {
	newuser(e);
	return;
    }
    if (strcmp(e->class, strtrim(class)) &&
	strcmp(class, "STAFF") && strcmp(class, "SIPB")) {
	com_err(whoami, 0, "updating class for user %s %s from %s to %s",
		first, last, class, e->class);
	if (status == US_NOT_ALLOWED) status = US_NO_LOGIN_YET;
	if (status == US_ENROLL_NOT_ALLOWED) status = US_ENROLLED;
	strcpy(class, e->class);
##	repeat replace u (mit_year = @class, #status = @status, ugdefault = 1,
##		   modtime = "now", modby = WHO, modwith = PROG)
##	    where u.users_id = @id
    }
    changed = nochange = 0;
    strcpy(buf, e->address);
    if (*e->dorm) {
	strcat(buf, " ");
	strcat(buf, e->dorm);
    }
    if (*e->city) {
	strcat(buf, " ");
	strcat(buf, e->city);
    }
    FixCase(buf);
    if (*e->state) {
	strcat(buf, " ");
	strcat(buf, e->state);
    }
    while (to = index(buf, ','))
      *to = ';';
    while (to = index(buf, ':'))
      *to = ';';
    if (newfinger) {
	if (haddr[0] == ' ') {
	    strncpy(haddr, buf, 80);
	    haddr[80] = 0;
	    changed++;
	} else if (strncmp(strtrim(haddr), buf, 80))
	  nochange++;
    } else {
	if (strncmp(strtrim(haddr), buf, 80))
	  changed++;
	strncpy(haddr, buf, 80);
	haddr[80] = 0;
    }
    from = e->dphone;
    to = buf;
    while (*from) {
	if (isdigit(*from))
	  *to++ = *from;
	from++;
    }
    *to = 0;
    if (newfinger) {
	if (hphone[0] == ' ') {
	    strncpy(hphone, buf, 16);
	    hphone[16] = 0;
	} else if (strncmp(strtrim(hphone), buf, 16))
	  nochange++;
    } else {
	if (strncmp(strtrim(hphone), buf, 16))
	  changed++;
	strncpy(hphone, buf, 16);
	hphone[16] = 0;
    }
    from = e->mphone;
    to = buf;
    while (*from) {
	if (isdigit(*from))
	  *to++ = *from;
	from++;
    }
    *to = 0;
    if (newfinger) {
	if (ophone[0] == ' ') {
	    strncpy(ophone, buf, 12);
	    ophone[12] = 0;
	} else if (strncmp(strtrim(ophone), buf, 12))
	  nochange++;
    } else {
	if (strncmp(strtrim(ophone), buf, 12))
	  changed++;
	strncpy(ophone, buf, 12);
	ophone[12] = 0;
    }
    e->course = e->course;
    if (newfinger) {
	if (dept[0] == ' ') {
	    strncpy(dept, e->course, 12);
	    dept[12] = 0;
	} else if (strncmp(strtrim(dept), e->course, 11))
	  nochange++;
    } else {
	if (strncmp(strtrim(dept), e->course, 11))
	  changed++;
	strncpy(dept, e->course, 12);
	dept[12] = 0;
    }
    if (changed) {
	com_err(whoami, 0, "updating finger for %s %s", first, last);
##	repeat replace u (home_addr = @haddr, home_phone = @hphone,
##		   office_phone = @ophone, #mit_dept = @dept, ugdefault = 1,
##		   fmodtime = "now", fmodby = WHO, fmodwith = PROG)
##	    where u.users_id = @id
    } /* else if (nochange)
      com_err(whoami, 0, "NOT updating finger for %s %s", first, last);
       */
    if (!changed && !strcmp(e->class, class)) {
##	repeat replace u (ugdefault = 1) where u.users_id = @id
    }
    if (addxuser) {
	sid = e->id;
	name = e->name;
	strcpy(dept, e->course);
	title = e->title;
	strcpy(haddr, e->address);
	if (*e->dorm) {
	    strcat(haddr, " ");
	    strcat(haddr, e->dorm);
	}
	if (*e->city) {
	    strcat(haddr, " ");
	    strcat(haddr, e->city);
	}
	FixCase(haddr);
	if (*e->state) {
	    strcat(haddr, " ");
	    strcat(haddr, e->state);
	}
	
	status = 1;
##	repeat retrieve (status = any (xuser.users_id
##			 where xuser.users_id = @id))
	if (!status) {
##	append xuser (users_id = id, #id = sid, #name = name, #dept = dept,
##		      #title = title, address = haddr, #phone1 = hphone,
##		      #phone2 = ophone, modtime = "now")
	}
    }
##}


newuser(e)
struct entry *e;
##{
    char buf[512], *from, *to;
##  int id, uid;
##  char *last, *first, *class, *middle, login[9], *eid, fullname[65];
##  char haddr[81], hphone[17], ophone[13], dept[24], *sid, *title;


    strcpy(buf, e->address);
    if (*e->dorm) {
	strcat(buf, " ");
	strcat(buf, e->dorm);
    }
    if (*e->city) {
	strcat(buf, " ");
	strcat(buf, e->city);
    }
    if (*e->state) {
	strcat(buf, " ");
	strcat(buf, e->state);
    }
    strncpy(haddr, buf, 80);
    from = e->dphone;
    to = buf;
    while (*from) {
	if (isdigit(*from))
	  *to++ = *from;
	from++;
    }
    *to = 0;
    strncpy(hphone, buf, 16);
    from = e->mphone;
    to = buf;
    while (*from) {
	if (isdigit(*from))
	  *to++ = *from;
	from++;
    }
    *to = 0;
    strncpy(ophone, buf, 12);
    strncpy(dept, e->course, 12);
    
    id = set_next_object_id("users_id");
    uid = set_next_object_id("uid");
    sprintf(login, "#%d", uid);
    last = e->last;
    first = e->first;
    middle = e->middle;
    eid = e->eid;
    class = e->class;
    if (*middle)
      sprintf(fullname, "%s %s %s", first, middle, last);
    else
      sprintf(fullname, "%s %s", first, last);
    
##  append users (#login = login, users_id = id, #uid = uid, shell = "/bin/csh",
##		  #last = last, #first = first, #middle = middle, status = 0,
##		  #mit_id = eid, #mit_year = class, ugdefault = 1,
##		  modtime = "now", modby = WHO, modwith = PROG,
##		  #fullname = fullname, home_addr = haddr, home_phone = hphone,
##		  office_phone = ophone, #mit_dept = dept,
##		  fmodtime = "now", fmodby = WHO, fmodwith = PROG,
##		  potype = "NONE")

    sid = e->id;
    strcpy(fullname, e->name);
    strcpy(dept, e->course);
    title = e->title;
    strcpy(haddr, e->address);
    if (*e->dorm) {
	strcat(haddr, " ");
	strcat(haddr, e->dorm);
    }
    if (*e->city) {
	strcat(haddr, " ");
	strcat(haddr, e->city);
    }
    FixCase(haddr);
    if (*e->state) {
	strcat(haddr, " ");
	strcat(haddr, e->state);
    }

    if (addxuser) {
##	append xuser (users_id = id, #id = sid, #name = fullname, #dept = dept,
##		  #title = title, address = haddr, #phone1 = hphone,
##		  #phone2 = ophone, modtime = "now")
    }
    com_err(whoami, 0, "adding user %s %s", e->first, e->last);
##}


set_next_object_id(object)
    char *object;
##{
##  char *name;
##  int rowcount, exists, value;

    name = object;
##  begin transaction
##  repeat retrieve (value = values.#value) where values.#name = @name
##  inquire_equel(rowcount = "rowcount")
    if (rowcount != 1) {
##	abort
	return(0);
    }

##  retrieve (exists = any(users.name where users.name = value))
##  inquire_equel(rowcount = "rowcount")
    if (rowcount != 1) {
##	abort
	return(0);
    }
    while (exists) {
	value++;
	if (value > MAX_ID_VALUE)
	    value = MIN_ID_VALUE;
##	retrieve (exists = any(users.name where users.name = value))
    }

##  repeat replace values (#value = @value) where values.#name = @name
##  end transaction
    return(value);
##}


