; $Header: /afs/.athena.mit.edu/astaff/project/moiradev/repository/moira/clients/mmoira/menus.txt,v 1.7 1992-11-04 17:56:59 mar Exp $
;

; = menu name "mnemonic"
;	label		{ operation, form_name query_name argc "mnemonic" }
;  or
;	submenu name


= misc "s"
	show database statistics { MM_STATS, 0 get_all_table_stats 0 "s" }
	show active Moira clients { MM_CLIENTS, 0 _list_users 0 "c" }
	show numeric value { MM_SHOW_VALUE, show_value get_value 1 "n" }
	show alias	{ MM_SHOW_ALIAS, show_alias get_alias 3 "a" }

= server "r"
	show		{ MM_SHOW_HOST, show_host get_server_host_info 2 "s" }
	add		{ MM_ADD_HOST, add_host add_server_host_info 6 "a" }
	modify		{ MM_MOD_HOST, select_host get_server_host_info 2 "m" }
	delete		{ MM_DEL_HOST, select_host delete_server_host_info 2 "d" }
	clear server error	{ MM_CLEAR_HOST, select_host reset_server_host_error 2 "c" }
	reset server state	{ MM_RESET_HOST, select_host set_server_host_internal 9 "r" }

= service "c"
	show		{ MM_SHOW_SERVICE, show_service get_server_info 1 "s" }
	add		{ MM_ADD_SERVICE, add_service add_server_info 8 "a" }
	modify		{ MM_MOD_SERVICE, select_service get_server_info 1 "m" }
	delete		{ MM_DEL_SERVICE, select_service delete_server_info 1 "d" }
	clear service error	{ MM_CLEAR_SERVICE, select_service reset_server_error 1 "c" }
	reset service state	{ MM_RESET_SERVICE, select_service set_server_internal_flags 6 "r" }

= updates "u"
	show		{ MM_SHOW_DCM, 0 qualified_get_server 3 "s" }
	enable		{ MM_ENABLE_DCM, dcm_enable get_value 1 "e" }
	invoke		{ MM_TRIGGER_DCM, trigger_dcm trigger_dcm 0 "i" }
	service
	server

= zephyr "z"
	show		{ MM_SHOW_ZEPHYR, show_zephyr get_zephyr_class 1 "s" }
	add		{ MM_ADD_ZEPHYR, add_zephyr add_zephyr_class 9 "a" }
	modify		{ MM_MOD_ZEPHYR, select_zephyr get_zephyr_class 1 "m" }
	delete		{ MM_DEL_ZEPHYR, select_zephyr delete_zephyr_class 1 "d" }

= printer "r"
	show		{ MM_SHOW_PCAP, show_printer get_printcap_entry 1 "s" }
	add		{ MM_ADD_PCAP, add_printer add_printcap_entry 8 "a" }
	modify		{ MM_MOD_PCAP, select_printer get_printcap_entry 1 "m" }
	delete		{ MM_DEL_PCAP, del_printer delete_printcap_entry 1 "d" }

= cluster data "t"
	show		{ MM_SHOW_CLDATA, show_cldata get_cluster_data 2 "s" }
	add		{ MM_ADD_CLDATA, add_cldata add_cluster_data 3 "a" }
	delete		{ MM_DEL_CLDATA, del_cldata delete_cluster_data 3 "d" }

= cluster mappings "p"
	show		{ MM_SHOW_MCMAP, mcmap get_machine_to_cluster_map 2 "s" }
	add		{ MM_ADD_MCMAP, add_mcmap add_machine_to_cluster 2 "a" }
	delete		{ MM_DEL_MCMAP, del_mcmap delete_machine_from_cluster 2 "d" }

= cluster "c"
	show		{ MM_SHOW_CLUSTER, show_cluster get_cluster 1 "s" }
	add		{ MM_ADD_CLUSTER, add_cluster add_cluster 3 "a" }
	modify		{ MM_MOD_CLUSTER, select_cluster get_cluster 1 "m" }
	delete		{ MM_DEL_CLUSTER, del_cluster delete_cluster 1 "d" }
	cluster mappings
	cluster data

= machine "h"
	show		{ MM_SHOW_MACH, show_machine get_machine 1 "s" }
	add		{ MM_ADD_MACH, add_machine add_machine 2 "a" }
	modify		{ MM_MOD_MACH, select_machine get_machine 1 "m" }
	delete		{ MM_DEL_MACH, del_machine delete_machine 1 "d" }

= member "m"
	show		{ MM_SHOW_MEMBERS, show_members get_members_of_list 1 "s" }
	add		{ MM_ADD_MEMBER, add_member add_member_to_list 3 "a" }
	delete		{ MM_DEL_MEMBER, del_member delete_member_from_list 3 "d" }
	delete a member from all lists { MM_DEL_ALL_MEMBER, del_all_member get_lists_of_member 2 "l" }

= list "l"
	show		{ MM_SHOW_LIST, show_list get_list_info 1 "s" }
	show all public mailing lists { MM_SHOW_MAILLIST, 0 qualified_get_lists 5 "p" }
	show all items a member can administer { MM_SHOW_ACE_USE, show_ace_use get_ace_use 2 "i" }
	add		{ MM_ADD_LIST, add_list add_list 10 "a" }
	modify		{ MM_MOD_LIST, select_list get_list_info 1 "m" }
	delete		{ MM_DEL_LIST, del_list delete_list 1 "d" }

= quota "q"
	show		{ MM_SHOW_QUOTA, show_quota get_quota 3 "s" }
	add		{ MM_ADD_QUOTA, add_quota add_quota 4 "a" }
	modify		{ MM_MOD_QUOTA, mod_quota update_quota 4 "m" }
	delete		{ MM_DEL_QUOTA, del_quota delete_quota 3 "d" }
	show default	{ MM_SHOW_DQUOTA, 0 get_value 1 "w" }
	set default	{ MM_SET_DQUOTA, set_dquota set_value 2 "t" }

= nfs partition "n"
	show		{ MM_SHOW_NFS, show_nfs get_nfsphys 2 "s" }
	add		{ MM_ADD_NFS, add_nfs add_nfsphys 6 "a" }
	modify		{ MM_MOD_NFS, select_nfs get_nfsphys 2 "m" }
	delete		{ MM_DEL_NFS, del_nfs delete_nfsphys 2 "d" }

= filesystem alias "l"
	show		{ MM_SHOW_FS_ALIAS, show_fs_alias get_alias 3 "s" }
	add		{ MM_ADD_FS_ALIAS, add_fs_alias add_alias 3 "a" }
	delete 		{ MM_DEL_FS_ALIAS, del_fs_alias delete_alias 3 "d" }

= filesystem group "g"
	show		{ MM_SHOW_FSGROUP, show_fsgroup get_filesys_by_label 1 "s" }
	insert		{ MM_ADD_FSGROUP, add_fsgroup add_filesys_to_fsgroup 3 "i" }
	re-order	{ MM_MOV_FSGROUP, order_fsgroup add_filesys_to_fsgroup 3 "o" }
	remove		{ MM_DEL_FSGROUP, del_fsgroup remove_filesys_from_fsgroup 2 "r" }

= filesystem "f"
	show		{ MM_SHOW_FILSYS, show_filsys get_filesys_by_label 1 "s" }
	add		{ MM_ADD_FILSYS, add_filsys add_filesys 11 "a" }
	modify		{ MM_MOD_FILSYS, select_filsys get_filesys_by_label 1 "m" }
	delete		{ MM_DEL_FILSYS, del_filsys delete_filesys 1 "d" }
	filesystem group
	filesystem alias
	nfs partition

= kerberos mapping "k"
	show		{ MM_SHOW_KRBMAP, show_krbmap get_kerberos_user_map 2 "s" }
	add		{ MM_ADD_KRBMAP, add_krbmap add_kerberos_user_map 2 "a" }
	delete		{ MM_DEL_KRBMAP, del_krbmap delete_kerberos_user_map 2 "d" }

= pobox "p"
	show		{ MM_SHOW_POBOX, select_pobox get_pobox 1 "s" }
	set		{ MM_SET_POBOX, set_pobox set_pobox 3 "t" }
	reset		{ MM_RESET_POBOX, reset_pobox set_pobox_pop 1 "r" }
	delete		{ MM_DEL_POBOX, del_pobox delete_pobox 1 "d" }

= user "u"
	show		{ MM_SHOW_USER, show_user get_user_account_by_login 1 "s" }
	add		{ MM_ADD_USER, add_user add_user_account 9 "a" }
	register	{ MM_REGISTER, register_user register_user 3 "r" }
	modify		{ MM_MOD_USER, select_user get_user_account_by_login 1 "m" }
	deactivate	{ MM_DEACTIVATE, deactivate_user update_user_status 2 "d" }
	expunge		{ MM_EXPUNGE, expunge_user delete_user 1 "x" }
	show finger info { MM_SHOW_FINGER, show_finger get_finger_by_login 1 "f" }
	modify finger info { MM_MOD_FINGER, select_finger get_finger_by_login 1 }
	kerberos mapping

= ?help "?"
	about moira	{ MM_HELP_MOIRA, 0 about_moira 0 "?" }
	wildcards	{ MM_HELP_WILDCARDS, 0 wildcards 0 "w" }
	using the mouse { MM_HELP_MOUSE, 0 mouse 0 "m" }
	using the keyboard { MM_HELP_KEYBOARD, 0 keyboard 0 "k" }
	reporting bugs	{ MM_HELP_BUGS, 0 bugs 0 "b" }
	authors		{ MM_HELP_AUTHORS, 0 authors 0 "a" }

= file "i"
	save log buffer	{ MM_SAVE_LOG, save_log 0 0 "l" }
	quit		{ MM_QUIT, 0 0 0 "q" }

= toplevel
	file
	user
	pobox
	list
	member
	filesystem
	quota
	machine
	cluster
	printer
	zephyr
	updates
	misc
	?help
