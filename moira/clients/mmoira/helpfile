$Header: /afs/.athena.mit.edu/astaff/project/moiradev/repository/moira/clients/mmoira/helpfile,v 1.4 1992-12-14 11:58:05 mar Exp $
*no_more_help
Sorry, no further help is available.
*show_user
This will display information about a user in the database.  The user
may or may not have an active account.

Users may be retrieved in four ways:
+ by login name (may use wildcards)
+ by Unix UID (must match exactly)
+ by first and/or last names (may use wildcards)
+ by class (please do not specify a class with too many people in it)

Fill in the desired field(s), click on "OK", and moira will retrieve
any matching users.  Moira will look to see which field(s) you
filled in, and perform one of the four retrievals mentioned above.
*add_user
Specify all of the information to add a new user to the database.  The
user need not have an active user account.

+ specify a login name of 3 to 8 characters, or the special value
  "create unique login" to have moira choose one for you
+ specify a number for the UID, or the special value "create unique UID"
  to have moira choose one for you.
+ Moira has a set of standard capitalization rules it uses on users'
  real names.  If you attempt to enter names capitalized differently,
  Moira will complain.  You may override this, but if you do so, the
  register program may not work for that user.
+ the ID number will be one-way encrypted before being stored in the
  database.  If you wish to enter the encrypted ID directly, enclose
  it in double-quotes.
+ to create a fully active user account, enter a user here as status
  "Registerable", then use the "register" option on the "user" menu to
  complete the user account.
*register_user
This will turn an entry for a user in the database to a fully
functioning account.  The user may be selected in two ways:

+ specify the real name of the user (with wildcards allowed) in the
  first name and last name fields.  This must match only one user in
  the database.
+ specify the unix UID of the desired user.

Be sure to fill in a login name which is not in use.  The suggested
name is
  first initial, middle initial, first six characters of last name
but must be eight or fewer characters long.
*select_user
Specify the login name of the user to be modified.  Wildcards may
be used, but your specification must match exactly one user.
*mod_user
Change any fields desired, then click on "OK" to modify the user
entry.  You may even change the login name.

+ You may change the UID to the special value "create unique UID"
  to have moira choose another one for you.
+ Moira has a set of standard capitalization rules it uses on users'
  real names.  If you attempt to enter names capitalized differently,
  Moira will complain.  You may override this, but if you do so, the
  register program may not work for that user.
+ the ID number will be one-way encrypted before being stored in the
  database.  To enter an already encrypted ID, type double-quotes (")
  around it.
+ If you are just changing the account status, in the future remember
  that the "deactivate" choice of the "user" menu is a quick way to
  set the status to "3 - Deleted".
*deactivate_user
Specify the login name of the user to be deactivated.

Deactivating a user makes their account no longer usable.  They will
show up with an account status of "3 - Marked for Deletion".  However,
all of their information will still be in the database so that the
account can be turned back on if necessary.  Since they are still in
the database, their login name and UID may not be re-used.  You may
wish to make the user's group list no longer active and deny access to
their locker at the same time.

At some point in the future, deactivated accounts should be expunged,
either in bulk or with the "expunge" option of the "user" menu.
*expunge_user
Specify the login name of the user to be expunged.

This will remove the user's record from the Moira database (but not
from Kerberos).  Once this is done, the login name and UID may be
reused.  It is a good idea to leave users in the deactivated state for
a while before expunging them so that the name and ID are not reused
right away, and the account can be reactivated if necessary.

At Project Athena, we have decided that expunging individual accounts
is a bad idea, so any account which has ever been active may not be
expunged this way.  These accounts must be removed in bulk by the
Moira administrator.
*show_finger
Specify a login name to select a user whose finger information will be
displayed.  This information will exist for users whose accounts are
not yet active, as it is loaded at the same time as the users
themselves.
*select_finger
Specify the login name of the user whose finger information is to be
modified.  Wildcards may be used, but your specification must match
exactly one user.
*mod_finger
Enter the new information about the user.  This information will
appear where the finger program can see it.  

You may set your name as it appears to other users to anything you
want.  Please keep it something resembling your real name.  Our
operations staff can find out the real name of the owner of an
account.

The rest of the information is optional, and is initialized to
information from the administration.  If you do not want this
information to appear for you, type spaces over it.  Please do not
enter incorrect information.

Note that commas (,) and colons (:) are not allowed in these
responses.  This is due to how the information is manipulated later.
We suggest that you use a semicolon (;) to separate parts of your
address.
*select_pobox
Enter the login name of a user to see what that user's P. O. Box or
mail forwarding is set to.
*set_pobox
This allows you to set where a user receives their mail.  Specify the
login name to select a user.

+ If the type is POP, then the user will receive their mail on a post
  office (POP) server.  Select one of the POP servers listed below.
+ If the type is SMTP, then the user will have their mail forwarded
  somewhere else.  Type the destination address in the "SMTP Address"
  field.
+ If the type is NONE, the user will be unable to receive mail.  This
  is the same as deleting the P. O. Box.

Note that if the user has had their mail forwarded, and wants to
receive it locally again, you should not use this form; select the
"reset" option from the "pobox" menu to select the same POP server
that they previously used.

To add new POP servers to the list, add them as POP servers in the
servers submenu of the updates menu.
*reset_pobox
This option will change a user's mail setting to receiving on a local
POP server.  The server chosen will be the same one that the user has
used in the past.  If the user is already receiving their mail
locally, or has never had a POP box, then you will get an error.  Use
the "set" option of the "pobox" menu for more general mail
manipulation.
*del_pobox
If you delete a user's P. O. Box, they will not be able to receive
mail.  This normally should not be done.  To go ahead and delete a
users mailbox, enter their login name.
*show_krbmap
This will display user to kerberos principal mappings.  You may
specify the mappings to be displayed by entering a login name, a
principal name, or both.  Either field may contain wildcards.
*add_krbmap
This will add a new user to kerberos mapping to the database.  You
must fill in both fields, entering a login name and a kerberos
principal.

Note that the principal is case sensitive, and should be entered with
the realm in uppercase.  If the principal name contains a periods or
at-signs other than as separators between the name, instance and
realm, be sure to escape them with backslashes (\).
*del_krbmap
This will remove a mapping from the database.  You must fill in both
fields, exactly matching an existing kerberos mapping.

Note that the principal is case sensitive, and should be entered with
the realm in uppercase.  If the principal name contains a periods or
at-signs other than as separators between the name, instance and
realm, be sure to escape them with backslashes (\).
*show_list
This will show you the information about one or more lists in the
database.  Wildcards may be used in the name.
*show_ace_use
This will show you every object in the database that can be
administered by a particular entity.  This includes lists,
filesystems, services, quotas, queries, and zephyr controls.  The
entity specified can be just a user, and kerberos principal, or a
moira list.  Note that the name of the entity cannot have wildcards.

If you specify to search recursively, for every list of which the
named entity is a member, items that list owns will also be displayed.
Note that this can take a long time, so please only use it if
necessary.
*add_list
This will add a new list to the database.  The name can be any string
up to 32 characters long, but cannot contain uppercase letters or
punctuation characters other than hyphen, underscore, and period.  

The flags control attributes of the list: if the list is inactive
(active flag is false), no services other than moira will know about
the list; if the list is public (public flag is true), anyone may add
or remove themselves from the list; if the list is hidden (hidden flag
is true), no one other than the list owners may get information from
moira about the list (but be aware that often list information is
available from other sources, so this is not secure); if the maillist
flag is true, you will be able to send email to the list (lists get
automatically promoted to maillists if they are members of maillists);
if the group flag is true, the list will be a unix file access group.
Only if the list is a group is the Unix GID field valid.  This field
may contain an integer or the string "create unique GID", in which
case Moira will assign a number.

The owner can be a user, a kerberos principal, or any list.  A list
may own itself, in which case each member of the list is an
administrator of that list.  Finally, the description field can
contain anything you like.
*select_list
Enter the name of a list to modify.  Wildcards may be used
in the name, but only the first matching name will be used.
*del_list
Enter the name of a list to delete.  Wildcards may be used
in the name, but only the first matching name will be used.
*mod_list
You may edit any of the information about the list.  The name can be
any string up to 32 characters long, but cannot contain uppercase
letters or punctuation characters other than hyphen, underscore, and
period.

The flags control attributes of the list: if the list is inactive
(active flag is false), no services other than moira will know about
the list; if the list is public (public flag is true), anyone may add
or remove themselves from the list; if the list is hidden (hidden flag
is true), no one other than the list owners may get information from
moira about the list (but be aware that often list information is
available from other sources, so this is not secure); if the maillist
flag is true, you will be able to send email to the list (lists get
automatically promoted to maillists if they are members of maillists);
if the group flag is true, the list will be a unix file access group.
Only if the list is a group is the Unix GID field valid.  This field
may contain an integer or the string "create unique GID", in which
case Moira will assign a number.

The owner can be a user, a kerberos principal, or any list.  A list
may own itself, in which case each member of the list is an
administrator of that list.  Finally, the description field can
contain anything you like.
*show_members
You may list the members of a list, or the lists to which a member
belongs.  Please fill out EITHER the list name OR the member type and
name, but not both.

If you tell it to search recursively, when retrieving the members of a
list it will also find the members of any other lists which are
members of the list in question.
*add_member
This will allow you to add a new member to a list.  Enter the name of
the list, and the type and name of the member.  Do not use wildcards
in either of the names.
*del_member
This will allow you to remove an existing member from a list.  Enter
the name of the list, and the type and name of the member.  Do not use
wildcards in either of the names.
*del_all_member
This will allow you to remove a particular member from all lists that
member belongs to.  You may specify any type of member, but must
exactly match that member without wildcards.

This program can prompt you for each deletion, or simply do them all.
*del_mem_confirm
If you answer yes, this member will be deleted from the named list.
Answer no to avoid the deletion.  In either case, you will continue to
be prompted with the other lists the member belongs to.
*authors
This moira client was written by Mark Rosenstein and Andy Oakland of
MIT Information Systems/Distributed Computing and Network Services
(formerly Project Athena).

The best way to reach someone with questions or comments about this
program is to email to moira@mit.edu.
*about_moira
Moira is a system configuration manager for distributed systems.  This
program is the user interface part of the system, and allows you to
manipulate everything moira knows about.

The top menu bar lists the kinds of things moira knows about, and
clicking the mouse on one of them will display a menu of operations
supported for that kind of object.  Some of these menus have submenus
for related objects.

When you select a menu item, a form will be displayed.  Fill out any
desired parts of the form:
 + put the correct value in any text fields
 + click on the appropriate choice in keyword fields
 + click on the value to toggle booleans between True and False
 + typing TAB will forward you to the next field
When you are done, click the mouse on "OK".  The form will disappear,
and if you are retrieving information from the database, the results
will be displayed in the window underneath the form.  Clicking on
"Apply" will perform the operation, but leave the form up on the
screen.  If you click on "Cancel", the form will disappear without
doing anything.  Each form has a help message specific to that form
that you can see by clicking the mouse on "Help".
*add_new_value
This will allow you to add a new keyword which can be specified for
the field in the previous form.  Moira type fields are checked against
a list of legal values, but this list itself can easily be changed.
However, this should not be done lightly.  Be sure you know what you
are doing and really want this new value before adding it.

To have a keyword value removed, ask the Moira system administrator.
*wildcards
Wildcards are allowed in most fields when looking things up in the
database.  Asterisk "*" will match zero or more characters, so that
"Rose*" will match "Rose", "Rosen", "Rosenberg" or "Rosenstein".

Be careful about using wildcards where your query will match too much
data in the database.  You probably do not want to retrieve 1000
items, and doing so will cause the server to take a long time and
possibly require more resources than are available.
*mouse
You may also retrieve or modify objects by using the mouse to click on
them where they appear in the log window.  Regular mouse clicks will
do selections as they do in most X applications.  But if you hold down
SHIFT and click the first mouse button, it will retrieve the
referenced object.  And if you hold down SHIFT and click the second
mouse button, it will pull up the window to modify the referenced
object.  If you click the mouse on something the program doesn't
recognize as an object, it will beep at you.

For example, when you show information about a filesystem, a paragraph
is added to the log that starts with "Filesystem: foo".  If you click
on the name (foo in the example), it will reference that filesystem
again.  The paragraph about the filesystem also mentions a machine, a
user (the owner), a group (the owners), and another user (who last
modified the info).  You can click on any of these names to select the
object being referred to.
*keyboard
There are keyboard accelerators for many of the mouse actions.

For choosing items from the menubar, if you hold down META and type the
letter which is underlined in each word, you will select that menu.
Then typing the letter underlined in any of the items in the menu will
select that item.

When you are filling out a form, ENTER will advance you to the next
field if there is more than one field in the form.  If there is only
one field, ENTER is equivalent to clicking on OK.  META-ENTER or
SHIFT-ENTER is the same as clicking on OK.  ^C in a form is the same
as clicking on CANCEL.  Meta-? is the same as clicking on HELP.
*bugs
Please report bugs in this program by sending email to:
                     bug-moira@mit.edu 
Please be sure to mention what kind of computer you were running it
on, and any other necessary information so that we can repeat the bug
before we fix it.
*save_log
Enter a file name here, and the current contents of the log file will
be written out to that file.
*fixcase
It is important that names in the Moira database all follow the same
capitalization style so that the register program can find users.  So
even though for a few names it may not look right, we strongly suggest
that you follow what this program suggests.
*confirm_del_all
If you answer yes, this member will be deleted from the named list.
Answer no to avoid the deletion.  In either case, you will continue to
be prompted with the other lists the member belongs to.
*show_filsys
This will display information about a filesystem.  The filesystem may
be of any protocol type and may be a filesystem group or multiple
filesystem entry as well.

Filesystems may be retrieved in any of five ways:
+ by the name of the filesystem (may use wildcards)
+ by the name of the fileserver (machine) (must match exactly)
+ by the actual partition of an NFS server (specify machine and
  partition, both must match exactly)
+ by the owning group of the filesystem (must match exactly)
+ by the pathname of the locker on the fileserver

Fill in the desired field(s), click on "OK", and moira will retrieve
any matching filesystems.  Moira will look to see which field(s) you
filled in, and perform one of the for retrievals mentioned above.
*add_filsys
Specify all of the information to add a new filesystem to the
database.  The name, type, owner, owners and lockertype are mandatory
fields.  The other fields may have to be filled in depending on what
the type is.

+ For type AFS filesystems, the machine/cell field contains the AFS
  cell name.  The remote name is the path to the volume mountpoint in
  AFS.
+ For type ERR filesystems, only the comment field is actually used.
  The contents of the comment field will be displayed as an error
  message when someone tries to attach this filesystem.
+ No other fields are necessary for type FSGROUP or MUL filesystems.
  Use the operations on the filesystem group submenu to manipulate
  the membership of these types.
+ For type NFS filesystems, the machine field names the fileserver,
  and the remote name is the path of the directory on the fileserver.
*select_filsys
Specify the name of a filesystem to be modified.  Wildcards may be
used, but your specification must match exactly one filesystem.
*mod_filsys
Change any fields desired, then click on "OK" to modify the filesystem
entry.  You may even change the name of the filesystem.  The name,
type, owner, owners and lockertype are mandatory fields.  The other
fields may have to be filled in depending on what the type is.

+ For type AFS filesystems, the machine/cell field contains the AFS
  cell name.  The remote name is the path to the volume mountpoint in
  AFS.
+ For type ERR filesystems, only the comment field is actually used.
  The contents of the comment field will be displayed as an error
  message when someone tries to attach this filesystem.  The other
  fields may be left so that when the filesystem is re-enabled, you
  only have to change the type and comment.
+ No other fields are necessary for type FSGROUP or MUL filesystems.
  Use the operations on the filesystem group submenu to manipulate
  the membership of these types.
+ For type NFS filesystems, the machine field names the fileserver,
  and the remote name is the path of the directory on the fileserver.
*del_filsys
Enter the name of a filesystem to delete.  Wildcards may be used in
the name, but only the first matching name will be used.
*show_fsgroup
This will display information about a filesystem group, multiple
filesystem, or any other type of filesystem.  You may use wildcards in
the name you specify.
*add_fsgroup
This enables you to add additional filesystems to a filesystem group
or multiple filesystem.  Enter the name of the group, and the
filesystem to be added.  Since the order of membership in these groups
is important, you must also indicate where to insert the filesystem by
indicating whether the new one should be first or which one it should
follow.  This sorted list will be displayed only after you have indicated
the name of the group to be modified.
*order_fsgroup
This enables you to change the order in which the members of a
filesystem group or multiple filesystem are listed.  First enter the
name of the group.  This must match the name of an existing filesystem
group or type multiple filesystem.  If it does, the next two fields
will have the possible choices filled in for you.

Now select which filesystem you want to reorder, then indicate which
filesystem it should follow.
*del_fsgroup
First enter the name of the filesystem group or multiple filesystem to
be modified.  This must match the name of an existing filesystem group
or type multiple filesystem.  If it does, the next field will now show
the current members of the group.  Select which one you want to remove
from the group.
*show_fs_alias
This will show you filesystem alias mappings.  Enter either the real
name of the filesystem or the alias name, and all matching pairs will
be displayed.
*add_fs_alias
This will let you create a new filesystem alias.  Enter the real name
of the filesystem, and the alternate name (alias) you want to be able
to use.
*del_fs_alias
This will let you delete an existing filesystem alias.  Enter the real
name of the filesystem, and the alternate name (alias) you want to
remove.
*show_nfs
This will show you information about NFS server partitions.  You must
fill in the name of the server, and optionally the name of the
partition (i.e. /u1/lockers), or leave the partition blank to see all
partitions on a server.
*add_nfs
This will let you add information about a new NFS server partition to
the database.  The machine (server) name will be canonicalized; if
you want to enter a string literally, enclose it in double-quotes.
The group quota flag must be set correctly for Moira to correctly
assign quotas to lockers on that partition.  The size and allocation
fields are used by Moira to automatically locate new lockers.  The
allocation field is updated whenever the quota on a locker on that
partition is changed.
*select_nfs
Name a NFS server and partition (i.e. /u1/lockers) to modify.  The
machine (server) name will be canonicalized; if you want to enter a
string literally, enclose it in double-quotes.
*mod_nfs
Change any fields desired, then click on "OK" to modify the NFS
partition information.  The machine (server) name will be
canonicalized; if you want to enter a string literally, enclose it in
double-quotes.  The group quota flag must be set correctly for Moira
to correctly assign quotas to lockers on that partition.  The size and
allocation fields are used by Moira to automatically locate new
lockers.  The allocation field is updated whenever the quota on a
locker on that partition is changed.
*del_nfs
Name a NFS server and partition (i.e. /u1/lockers) to delete.  The
machine (server) name will be canonicalized; if you want to enter a
string literally, enclose it in double-quotes.
*show_quota
This will show filesystem quotas.  If you only fill in the name of the
filesystem, then all quotas on that filesystem will be displayed.  If
you only fill in the user or group, then all quotas applying to that
user or group will be displayed.  If you fill on both, then only
matching quotas will be displayed.

Note that quotas on AFS filesystems are of type ANY and will not match
User or Group quotas.
*add_quota
First enter the name of the filesystem.  The program will then
indicate whether this filesystem should have a type ANY quota (i.e. it
is in AFS), a type GROUP quota (i.e. it is in NFS on a group quota
partition), or type USER (anything else).

If this is a user or group quota, you will have to fill in the name of
the user or group.  Finally, enter the actual quota value in Kilobytes.
*mod_quota
[First enter the name of the filesystem.  The program will then
indicate whether this filesystem should have a type ANY quota (i.e. it
is in AFS), a type GROUP quota (i.e. it is in NFS on a group quota
partition), or type USER (anything else).]

THIS DOES NOT WORK.  For now, you have to set the quota type by hand.

If this is a user or group quota, you will have to fill in the name of
the user or group.  Finally, enter the new quota value in Kilobytes.
*del_quota
[First enter the name of the filesystem.  The program will then
indicate whether this filesystem should have a type ANY quota (i.e. it
is in AFS), a type GROUP quota (i.e. it is in NFS on a group quota
partition), or type USER (anything else).]

THIS DOES NOT WORK.  For now, you have to set the quota type by hand.

If this is a user or group quota, you will have to fill in the name of
the user or group.
*set_dquota
Use this to set the default quota.  The default quota is the quota
that is automatically assigned to new users' home directories when the
register, and is the default value for other new locker creations as
well.  The value should be specified in Kilobytes.
*show_machine
This will show you the information about one or more machines (hosts)
in the database.  Wildcards may be used in the name.  If no wildcards
are used, the name you type will be canonicalized by the domain name
system before being looked up in the database.  To bypass this
canonicalization, put the name inside a pair of double-quotes.  All
machine name comparisons are case-insensitive.
*add_machine
This will add a new machine (host) to the database.  The name you type
will be canonicalized by the domain name system.  To bypass this
canonicalization, put the name inside a pair of double-quotes.  Each
machine must be of one of the defined types.

Note that type "AFS" is used with pseudo-machines that are used as AFS
cell name indicators.
*select_machine
Enter the name of the machine (host) to modify.  Wildcards may be used
in the name.  If no wildcards are used, the name you type will be
canonicalized by the domain name system before being looked up in the
database.  To bypass this canonicalization, put the name inside a pair
of double-quotes.  All machine name comparisons are case-insensitive.
*mod_machine
You may change the name and/or type of the machine.  The name you type
will be canonicalized by the domain name system.  To bypass this
canonicalization, put the name inside a pair of double-quotes.  Each
machine must be of one of the defined types.

Note that type "AFS" is used with pseudo-machines that are used as AFS
cell name indicators.
*del_machine
Specify the hostname to delete a machine from the Moira database.  The
name you type will be canonicalized before it is used.  To enter a
literal string, enclose it in double-quotes.
*show_cluster
This will show you the information about one or more clusters in the
database.  Wildcards may be used in the name.
*add_cluster
This will add a new cluster to the database.  Choose a name containing
letters, numbers, and underscore.  Current Athena convention is
building number (preceded by "M" if it doesn't start with a letter),
optional descriptor such as "staff" or "test", a hyphen, and then the
platform designation such as "vs" or "dmu".  The description and
location fields are optional.
*select_cluster
Enter the name of a cluster to modify.  Wildcards may be used in the
name, although only the first match found will be modified.
*mod_cluster
You may change any information about the cluster, including its name.
When you have the information they way you want it, click on "OK" to
commit the changes.
*del_cluster
Specify the name of the cluster to delete.
*mcmap
This will show machine to cluster mappings.  This mapping is not
one-to-one, as a machine may be in multiple clusters and clusters
generally contain more than one machine.

Enter either a machine name or a cluster name to see the matching
memberships.  You may use wildcards with either.
*add_mcmap
This will add a machine to a cluster.  Note that a machine may be in
multiple clusters.  The machine name you type will be canonicalized by
the domain name system before being stored in the database.  To bypass
this canonicalization, put the name inside a pair of double-quotes.
*del_mcmap
This will remove a machine from a cluster.  The machine name you type
will be canonicalized by the domain name system before being stored in
the database.  To bypass this canonicalization, put the name inside a
pair of double-quotes.
*show_cldata
This will show the data associated with a cluster.  You must enter a
clustername, which may include wildcards.  The label is optional, and
it too may contain wildcards.  If no label is specified, all data
associated with the cluster will be displayed.
*add_cldata
This will add additional data to a cluster.  You must fill in all of
the fields.  Enter a valid cluster name.  The label may be any string,
but is generally one of "syslib", "lpr", or "zephyr".  The data also
may be anything, but is generally a filesystem name, printer name, or
zephyr server name.
*del_cldata
This will remove data from a cluster.  Enter a valid cluster name.
You must fill in each of the fields, although if you use a wildcard
for the value, it will remove all data with the specified label from
that cluster.
*show_printer
This will show you information about one or more printers in the
database.  Wildcards may be used in the name.
*add_printer
This will add a new printer to the database.  The printer must have a
unique name up to 32 characters long.  Enter the name of the print
spooler as the spooling host.  This hostname will be canonicalized
before it is stored in the database.  To enter a literal string,
enclose it in double-quotes.  The spool directory is the directory on
the print spooler for that printer.  The remote name is the name of
the printer on the print spooler.  The quota server is another
canonicalized hostname, this time of the machine that handles
accounting for this printer.  To disable accounting, leave the quota
server field blank.  If authentication is true, all print requests for
this printer must be kerberos authenticated.  The price entered here
(in cents) is for informational purposes only; the quota server gets
the actual price from another source.
*select_printer
Enter the name of a printer to modify.  While you may use wildcards
here, you will only get a chance to modify the first printer matched.
*mod_printer
Change any desired fields, then click on "OK" to commit the changes.

The printer must have a unique name up to 32 characters long.  Enter
the name of the print spooler as the spooling host.  This hostname
will be canonicalized before it is stored in the database.  To enter a
literal string, enclose it in double-quotes.  The spool directory is
the directory on the print spooler for that printer.  The remote name
is the name of the printer on the print spooler.  The quota server is
another canonicalized hostname, this time of the machine that handles
accounting for this printer.  To disable accounting, leave the quota
server field blank.  If authentication is true, all print requests for
this printer must be kerberos authenticated.  The price entered here
(in cents) is for informational purposes only; the quota server gets
the actual price from another source.
*del_printer
Specify the name of a printer to delete.
*show_zephyr
Enter the name of a zephyr class to see the restrictions in place on
that class.  You may use wildcards.
*add_zephyr
Enter the necessary information to set up access controls on a class
of zephyr messages.  For each privilege, you can set a user, a single
kerberos principal, an access list, or nothing.  The privileges are:
 + XMT: the ability to transmit a zephyr message of this class
 + SUB: the ability to subscribe to messages of this class
 + IWS: the ability to subscribe to the wildcard instance of this class
 + IUI: the ability to use only the instance UID identity???
*select_zephyr
Enter a zephyr class whose restrictions you wish to modify or delete.
*mod_zephyr
Update the restrictions for this zephyr class.  When you are done,
click on "OK" to commit the changes.  For each privilege, you can set
a user, a single kerberos principal, an access list, or nothing.  The
privileges are:
 + XMT: the ability to transmit a zephyr message of this class
 + SUB: the ability to subscribe to messages of this class
 + IWS: the ability to subscribe to the wildcard instance of this class
 + IUI: the ability to use only the instance UID identity???
*dcm_enable
Use this switch to enable or disable DCM updates.  If this is not
enabled, the DCM will quit shortly after it starts.  When this is
enabled, there are still many other reasons (such as the existence of
the file /etc/nodcm) why it might not run.
*trigger_dcm
Use this to start a DCM pass now instead of waiting until the next
scheduled run.  Do not do this unless you understand all of the
implications of an unscheduled DCM run.
*show_service
This will show you the configuration of a DCM service to be updated.
The name may contain wildcards.
*add_service
Specify the information to add a new service to the Moira database.
Note that these services are used for two purposes: those which the
DCM updates, and those present just for a hesiod SLOC entry.

The interval is the minimum time between attempted updates.  The
destination file is where the DCM will leave the datafile on hosts
being updated.  The script will be run on each host being updated
after copying the datafile to its destination.  The service must be
enabled for the DCM to update it.  Services existing just for the
hesiod SLOC info should be left disabled.  The owner fields are
currently ignored.

If the type is UNIQUE, each host to be updated with this service will
be treated individually, and some of them may be updated
simultaneously.  If the type is REPLICAT(ED), only one instance of the
service will be updated at a time, and if any of them fail no further
updates for that service will occur until this is reset.
*select_service
Specify the name of the service to be affected (depending on the menu
item you selected, this could mean modifying, deleting, reseting
errors, or resetting the complete state).
*mod_service
Change any fields desired, then click on "OK" to commit the changes.
Note that these services are used for two purposes: those which the
DCM updates, and those present just for a hesiod SLOC entry.

The interval is the minimum time between attempted updates.  The
destination file is where the DCM will leave the datafile on hosts
being updated.  The script will be run on each host being updated
after copying the datafile to its destination.  The service must be
enabled for the DCM to update it.  Services existing just for the
hesiod SLOC info should be left disabled.  The owner fields are
currently ignored.

If the type is UNIQUE, each host to be updated with this service will
be treated individually, and some of them may be updated
simultaneously.  If the type is REPLICAT(ED), only one instance of the
service will be updated at a time, and if any of them fail no further
updates for that service will occur until this is reset.
*show_host
This will show the configuration of a DCM host/service tuple.  Enter
the service and/or host name.  Either of both of them may contain
wildcards.
*add_host
Specify the information to add a new host/service tuple to the Moira
database.  Note that these entries are actually used for two purposes:
to indicate what the DCM should update, and to create a hesiod SLOC
entry.

The service name should be the name of an existing service.  The host
name must be the name of a known host.  This host name will be
canonicalized before it is stored in the database.  To enter a literal
string, enclose it in double-quotes.  Enable the host if you actually
want it to recieve DCM updates.  The three values are used in a
service-specific way.  Values 1 and 2 are integers and value 3 is a
string.
*select_host
Specify the host/service tuple to be affected (depending on the menu
item you selected, this could mean modifying, deleting, reseting
errors, or resetting the complete state).
*mod_host
Change any fields desired, then click on "OK" to commit the changes.
Note that these entries are actually used for two purposes: to
indicate what the DCM should update, and to create a hesiod SLOC
entry.

The service name should be the name of an existing service.  The host
name must be the name of a known host.  This host name will be
canonicalized before it is stored in the database.  To enter a literal
string, enclose it in double-quotes.  Enable the host if you actually
want it to recieve DCM updates.  The three values are used in a
service-specific way.  Values 1 and 2 are integers and value 3 is a
string.
*show_value
This will show the value of a Moira configuration variable.  This is
intended primarily for the moira system administrator and others
familiar with moira's operation.  Wildcards are not allowed in the
variable name.

Variables of possible interest are uid and gid, which are the next ID
numbers to be assigned.
*show_alias
This will show a raw alias entry from the Moira database.  Besides the
obvious use for altername names for things, aliases are used to store
valid keywords for various fields, variable typing information, and
random string variables.

To see keywords for a field, enter the name of the keyword, and use
type TYPE.  To see the type associated with a value, select TYPEDATA.
To see a string variable, use type VALUE.  Tye AFSPATH contains
information for turning a lockername and locker type into the
appropriate mountpoint for the locker.  The remaining types are just
for alias names.
